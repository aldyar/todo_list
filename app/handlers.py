# –ö–æ–º–∞–Ω–¥–∞ /start
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.database.request import (set_user, 
                                  save_user, 
                                  save_task, 
                                  get_tasks, 
                                  get_task_by_id, 
                                  mark_task_as_completed, 
                                  delete_task,
                                  get_user,
                                  get_tasks_by_keywords)
import app.keyboards as kb
from app.state import RegisterStates, TaskStates
from aiogram.fsm.context import FSMContext


router = Router()


@router.message(CommandStart())
async def start_command(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if user:
        await message.answer("üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!* –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.",
            reply_markup=kb.task,
            parse_mode="Markdown")
    else:
        await set_user(message.from_user.id)
        await message.answer("üëã *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ Task Manager!* üöÄ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìã*, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=kb.register_kb,
            parse_mode="Markdown")


@router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìã')
async def register_user(message: Message, state: FSMContext):
    await message.answer("üìã *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞:",
        parse_mode="Markdown")
    await state.set_state(RegisterStates.name)


@router.message(RegisterStates.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +123456789):",
        parse_mode="Markdown")
    await state.set_state(RegisterStates.phone)


@router.message(RegisterStates.phone)
async def process_phone(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    name = data['name']
    phone = message.text
    await save_user(tg_id=user_id, name=name, phone=phone)
    await state.clear()
    await message.answer("üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.",
        reply_markup=kb.task,
        parse_mode="Markdown")


@router.message(F.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
async def add_task(message: Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:")
    await state.set_state(TaskStates.title)


@router.message(TaskStates.title)
async def process_title(message: Message, state: FSMContext):
    task_title = message.text
    await state.update_data(title=task_title)
    await message.answer( "üìñ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskStates.description)


@router.message(TaskStates.description)
async def process_description(message: Message, state: FSMContext):
    task_description = message.text
    data = await state.get_data()
    task_title = data['title'] 
    await save_task(title=task_title, description=task_description, user_id=message.from_user.id)
    await state.clear()
    await message.answer("‚úÖ *–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.",parse_mode="Markdown")


@router.message(F.text == "üìã–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def tasks_list(message: Message):
    user_id = message.from_user.id
    tasks = await get_tasks(user_id=user_id)
    if not tasks:
        await message.answer( "‚ö†Ô∏è *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.*\n\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",parse_mode="Markdown")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for task in tasks:
        task_text = f"‚úÖ {task.title}" if task.is_completed else task.title
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=task_text,
                callback_data=f"task_{task.id}"
            )
        ])

    await message.answer( "üìù *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",reply_markup=keyboard,parse_mode="Markdown")


@router.callback_query(F.data.startswith("task_"))
async def task_detail(callback_query: CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split("_")[1])
    task = await get_task_by_id(task_id=task_id)
    if not task:
        await callback_query.message.answer(  "‚ö†Ô∏è *–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.* –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",parse_mode="Markdown")
        return
    await state.set_state(TaskStates.task_id)
    await state.update_data(task_id=task_id)
    message_text = f"üìå *{task.title}*\n"f"üìñ {task.description}\n\n"f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.is_completed else 'üîò –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
    await callback_query.message.answer(message_text, reply_markup=kb.completed_delete, parse_mode='Markdown')
    await callback_query.answer()



@router.message(F.text == "‚úÖ–í—ã–ø–æ–ª–Ω–∏—Ç—å")
async def task_complete(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("task_id")
    if task_id:
        await mark_task_as_completed(task_id=task_id)
        await message.answer("‚úÖ *–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*",reply_markup=kb.task,parse_mode="Markdown")
        await state.clear()

@router.message(F.text == "üóë–£–¥–∞–ª–∏—Ç—å")
async def task_delete(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("task_id")
    if task_id:
        await delete_task(task_id=task_id)
        await message.answer("üóë *–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!*",reply_markup=kb.task,parse_mode="Markdown")
        await state.clear()

@router.message(F.text=="üîç–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É")
async def start_search(message: Message, state: FSMContext):
    await state.set_state(TaskStates.search)
    await message.answer( "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è):",parse_mode="Markdown")


@router.message(TaskStates.search)
async def search_task(message: Message, state: FSMContext):
    user_id = message.from_user.id
    search_text = message.text.strip().lower()
    tasks = await get_tasks_by_keywords(user_id=user_id, keyword=search_text)
    if tasks:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for task in tasks:
            task_text = f"‚úÖ {task.title}" if task.is_completed else task.title
            keyboard.inline_keyboard.append([InlineKeyboardButton(
                text=task_text, callback_data=f"task_{task.id}")
            ])
        await message.answer(f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* `{search_text}`",reply_markup=keyboard,parse_mode="Markdown")
    else:
        await message.answer(f"‚ö†Ô∏è *–ó–∞–¥–∞—á–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É* `{search_text}`, *–Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*",parse_mode="Markdown")

    await state.clear()

